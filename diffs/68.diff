diff --git a/parse.c b/parse.c
index d801251..fb9a361 100644
--- a/parse.c
+++ b/parse.c
@@ -60,6 +60,9 @@ static Obj *globals;
 
 static Scope *scope = &(Scope){};
 
+// Points to the function object the parser is currently parsing.
+static Obj *current_fn;
+
 static bool is_typename(Token *tok);
 static Type *declspec(Token **rest, Token *tok, VarAttr *attr);
 static Type *declarator(Token **rest, Token *tok, Type *ty);
@@ -476,8 +479,11 @@ static bool is_typename(Token *tok) {
 static Node *stmt(Token **rest, Token *tok) {
   if (equal(tok, "return")) {
     Node *node = new_node(ND_RETURN, tok);
-    node->lhs = expr(&tok, tok->next);
+    Node *exp = expr(&tok, tok->next);
     *rest = skip(tok, ";");
+
+    add_type(exp);
+    node->lhs = new_cast(exp, current_fn->ty->return_ty);
     return node;
   }
 
@@ -1046,6 +1052,7 @@ static Token *function(Token *tok, Type *basety) {
   if (!fn->is_definition)
     return tok;
 
+  current_fn = fn;
   locals = NULL;
   enter_scope();
   create_param_lvars(ty->params);
diff --git a/test/function.c b/test/function.c
index ece913a..f06301b 100644
--- a/test/function.c
+++ b/test/function.c
@@ -39,6 +39,11 @@ int sub_short(short a, short b, short c) {
   return a - b - c;
 }
 
+int g1;
+
+int *g1_ptr() { return &g1; }
+char int_to_char(int x) { return x; }
+
 int main() {
   ASSERT(3, ret3());
   ASSERT(8, add2(3, 5));
@@ -56,6 +61,11 @@ int main() {
   ASSERT(1, sub_long(7, 3, 3));
   ASSERT(1, sub_short(7, 3, 3));
 
+  g1 = 3;
+
+  ASSERT(3, *g1_ptr());
+  ASSERT(5, int_to_char(261));
+
   printf("OK\n");
   return 0;
 }
