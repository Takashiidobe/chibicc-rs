diff --git a/chibicc.h b/chibicc.h
index 6849c23..fc81518 100644
--- a/chibicc.h
+++ b/chibicc.h
@@ -152,6 +152,7 @@ Obj *parse(Token *tok);
 //
 
 typedef enum {
+  TY_VOID,
   TY_CHAR,
   TY_SHORT,
   TY_INT,
@@ -201,6 +202,8 @@ struct Member {
   int offset;
 };
 
+extern Type *ty_void;
+
 extern Type *ty_char;
 extern Type *ty_short;
 extern Type *ty_int;
diff --git a/parse.c b/parse.c
index 6d6e1a9..2d3634c 100644
--- a/parse.c
+++ b/parse.c
@@ -198,8 +198,14 @@ static void push_tag_scope(Token *tok, Type *ty) {
   scope->tags = sc;
 }
 
-// declspec = "char" | "short" | "int" | "long" | struct-decl | union-decl
+// declspec = "void" | "char" | "short" | "int" | "long"
+//          | struct-decl | union-decl
 static Type *declspec(Token **rest, Token *tok) {
+  if (equal(tok, "void")) {
+    *rest = tok->next;
+    return ty_void;
+  }
+
   if (equal(tok, "char")) {
     *rest = tok->next;
     return ty_char;
@@ -301,6 +307,9 @@ static Node *declaration(Token **rest, Token *tok) {
       tok = skip(tok, ",");
 
     Type *ty = declarator(&tok, tok, basety);
+    if (ty->kind == TY_VOID)
+      error_tok(tok, "variable declared void");
+
     Obj *var = new_lvar(get_ident(ty->name), ty);
 
     if (!equal(tok, "="))
@@ -320,8 +329,14 @@ static Node *declaration(Token **rest, Token *tok) {
 
 // Returns true if a given token represents a type.
 static bool is_typename(Token *tok) {
-  return equal(tok, "char") || equal(tok, "short") || equal(tok, "int") ||
-         equal(tok, "long") || equal(tok, "struct") || equal(tok, "union");
+  static char *kw[] = {
+    "void", "char", "short", "int", "long", "struct", "union",
+  };
+
+  for (int i = 0; i < sizeof(kw) / sizeof(*kw); i++)
+    if (equal(tok, kw[i]))
+      return true;
+  return false;
 }
 
 // stmt = "return" expr ";"
diff --git a/test/variable.c b/test/variable.c
index 7c88442..ac4b251 100644
--- a/test/variable.c
+++ b/test/variable.c
@@ -62,6 +62,8 @@ int main() {
   ASSERT(3, ({ char *x[3]; char y; x[0]=&y; y=3; x[0][0]; }));
   ASSERT(4, ({ char x[3]; char (*y)[3]=x; y[0][0]=4; y[0][0]; }));
 
+  { void *x; }
+
   printf("OK\n");
   return 0;
 }
diff --git a/tokenize.c b/tokenize.c
index 3224369..a6849ba 100644
--- a/tokenize.c
+++ b/tokenize.c
@@ -126,7 +126,7 @@ static int read_punct(char *p) {
 static bool is_keyword(Token *tok) {
   static char *kw[] = {
     "return", "if", "else", "for", "while", "int", "sizeof", "char",
-    "struct", "union", "short", "long",
+    "struct", "union", "short", "long", "void",
   };
 
   for (int i = 0; i < sizeof(kw) / sizeof(*kw); i++)
diff --git a/type.c b/type.c
index 847b543..78f09d9 100644
--- a/type.c
+++ b/type.c
@@ -1,5 +1,7 @@
 #include "chibicc.h"
 
+Type *ty_void = &(Type){TY_VOID, 1, 1};
+
 Type *ty_char = &(Type){TY_CHAR, 1, 1};
 Type *ty_short = &(Type){TY_SHORT, 2, 2};
 Type *ty_int = &(Type){TY_INT, 4, 4};
@@ -101,6 +103,9 @@ void add_type(Node *node) {
   case ND_DEREF:
     if (!node->lhs->ty->base)
       error_tok(node->tok, "invalid pointer dereference");
+    if (node->lhs->ty->base->kind == TY_VOID)
+      error_tok(node->tok, "dereferencing a void pointer");
+
     node->ty = node->lhs->ty->base;
     return;
   case ND_STMT_EXPR:
