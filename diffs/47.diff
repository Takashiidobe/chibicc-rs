diff --git a/chibicc.h b/chibicc.h
index 8c2d1c9..35ada95 100644
--- a/chibicc.h
+++ b/chibicc.h
@@ -10,6 +10,7 @@
 
 typedef struct Type Type;
 typedef struct Node Node;
+typedef struct Member Member;
 
 //
 // strings.c
@@ -94,6 +95,7 @@ typedef enum {
   ND_LE,        // <=
   ND_ASSIGN,    // =
   ND_COMMA,     // ,
+  ND_MEMBER,    // . (struct member access)
   ND_ADDR,      // unary &
   ND_DEREF,     // unary *
   ND_RETURN,    // "return"
@@ -127,6 +129,9 @@ struct Node {
   // Block or statement expression
   Node *body;
 
+  // Struct member access
+  Member *member;
+
   // Function call
   char *funcname;
   Node *args;
@@ -147,6 +152,7 @@ typedef enum {
   TY_PTR,
   TY_FUNC,
   TY_ARRAY,
+  TY_STRUCT,
 } TypeKind;
 
 struct Type {
@@ -169,12 +175,23 @@ struct Type {
   // Array
   int array_len;
 
+  // Struct
+  Member *members;
+
   // Function type
   Type *return_ty;
   Type *params;
   Type *next;
 };
 
+// Struct member
+struct Member {
+  Member *next;
+  Type *ty;
+  Token *name;
+  int offset;
+};
+
 extern Type *ty_char;
 extern Type *ty_int;
 
diff --git a/codegen.c b/codegen.c
index 0449a58..b9ebd44 100644
--- a/codegen.c
+++ b/codegen.c
@@ -58,6 +58,10 @@ static void gen_addr(Node *node) {
     gen_expr(node->lhs);
     gen_addr(node->rhs);
     return;
+  case ND_MEMBER:
+    gen_addr(node->lhs);
+    println("  add $%d, %%rax", node->member->offset);
+    return;
   }
 
   error_tok(node->tok, "not an lvalue");
@@ -104,6 +108,7 @@ static void gen_expr(Node *node) {
     println("  neg %%rax");
     return;
   case ND_VAR:
+  case ND_MEMBER:
     gen_addr(node);
     load(node->ty);
     return;
diff --git a/parse.c b/parse.c
index 231f0ca..e5b7d07 100644
--- a/parse.c
+++ b/parse.c
@@ -52,6 +52,7 @@ static Node *equality(Token **rest, Token *tok);
 static Node *relational(Token **rest, Token *tok);
 static Node *add(Token **rest, Token *tok);
 static Node *mul(Token **rest, Token *tok);
+static Type *struct_decl(Token **rest, Token *tok);
 static Node *postfix(Token **rest, Token *tok);
 static Node *unary(Token **rest, Token *tok);
 static Node *primary(Token **rest, Token *tok);
@@ -166,15 +167,22 @@ static int get_number(Token *tok) {
   return tok->val;
 }
 
-// declspec = "char" | "int"
+// declspec = "char" | "int" | struct-decl
 static Type *declspec(Token **rest, Token *tok) {
   if (equal(tok, "char")) {
     *rest = tok->next;
     return ty_char;
   }
 
-  *rest = skip(tok, "int");
-  return ty_int;
+  if (equal(tok, "int")) {
+    *rest = tok->next;
+    return ty_int;
+  }
+
+  if (equal(tok, "struct"))
+    return struct_decl(rest, tok->next);
+
+  error_tok(tok, "typename expected");
 }
 
 // func-params = (param ("," param)*)? ")"
@@ -259,7 +267,7 @@ static Node *declaration(Token **rest, Token *tok) {
 
 // Returns true if a given token represents a type.
 static bool is_typename(Token *tok) {
-  return equal(tok, "char") || equal(tok, "int");
+  return equal(tok, "char") || equal(tok, "int") || equal(tok, "struct");
 }
 
 // stmt = "return" expr ";"
@@ -551,19 +559,91 @@ static Node *unary(Token **rest, Token *tok) {
   return postfix(rest, tok);
 }
 
-// postfix = primary ("[" expr "]")*
+// struct-members = (declspec declarator (","  declarator)* ";")*
+static void struct_members(Token **rest, Token *tok, Type *ty) {
+  Member head = {};
+  Member *cur = &head;
+
+  while (!equal(tok, "}")) {
+    Type *basety = declspec(&tok, tok);
+    int i = 0;
+
+    while (!consume(&tok, tok, ";")) {
+      if (i++)
+        tok = skip(tok, ",");
+
+      Member *mem = calloc(1, sizeof(Member));
+      mem->ty = declarator(&tok, tok, basety);
+      mem->name = mem->ty->name;
+      cur = cur->next = mem;
+    }
+  }
+
+  *rest = tok->next;
+  ty->members = head.next;
+}
+
+// struct-decl = "{" struct-members
+static Type *struct_decl(Token **rest, Token *tok) {
+  tok = skip(tok, "{");
+
+  // Construct a struct object.
+  Type *ty = calloc(1, sizeof(Type));
+  ty->kind = TY_STRUCT;
+  struct_members(rest, tok, ty);
+
+  // Assign offsets within the struct to members.
+  int offset = 0;
+  for (Member *mem = ty->members; mem; mem = mem->next) {
+    mem->offset = offset;
+    offset += mem->ty->size;
+  }
+  ty->size = offset;
+
+  return ty;
+}
+
+static Member *get_struct_member(Type *ty, Token *tok) {
+  for (Member *mem = ty->members; mem; mem = mem->next)
+    if (mem->name->len == tok->len &&
+        !strncmp(mem->name->loc, tok->loc, tok->len))
+      return mem;
+  error_tok(tok, "no such member");
+}
+
+static Node *struct_ref(Node *lhs, Token *tok) {
+  add_type(lhs);
+  if (lhs->ty->kind != TY_STRUCT)
+    error_tok(lhs->tok, "not a struct");
+
+  Node *node = new_unary(ND_MEMBER, lhs, tok);
+  node->member = get_struct_member(lhs->ty, tok);
+  return node;
+}
+
+// postfix = primary ("[" expr "]" | "." ident)*
 static Node *postfix(Token **rest, Token *tok) {
   Node *node = primary(&tok, tok);
 
-  while (equal(tok, "[")) {
-    // x[y] is short for *(x+y)
-    Token *start = tok;
-    Node *idx = expr(&tok, tok->next);
-    tok = skip(tok, "]");
-    node = new_unary(ND_DEREF, new_add(node, idx, start), start);
+  for (;;) {
+    if (equal(tok, "[")) {
+      // x[y] is short for *(x+y)
+      Token *start = tok;
+      Node *idx = expr(&tok, tok->next);
+      tok = skip(tok, "]");
+      node = new_unary(ND_DEREF, new_add(node, idx, start), start);
+      continue;
+    }
+
+    if (equal(tok, ".")) {
+      node = struct_ref(node, tok->next);
+      tok = tok->next->next;
+      continue;
+    }
+
+    *rest = tok;
+    return node;
   }
-  *rest = tok;
-  return node;
 }
 
 // funcall = ident "(" (assign ("," assign)*)? ")"
diff --git a/test/struct.c b/test/struct.c
new file mode 100644
index 0000000..b0b198f
--- /dev/null
+++ b/test/struct.c
@@ -0,0 +1,32 @@
+#include "test.h"
+
+int main() {
+  ASSERT(1, ({ struct {int a; int b;} x; x.a=1; x.b=2; x.a; }));
+  ASSERT(2, ({ struct {int a; int b;} x; x.a=1; x.b=2; x.b; }));
+  ASSERT(1, ({ struct {char a; int b; char c;} x; x.a=1; x.b=2; x.c=3; x.a; }));
+  ASSERT(2, ({ struct {char a; int b; char c;} x; x.b=1; x.b=2; x.c=3; x.b; }));
+  ASSERT(3, ({ struct {char a; int b; char c;} x; x.a=1; x.b=2; x.c=3; x.c; }));
+
+  ASSERT(0, ({ struct {char a; char b;} x[3]; char *p=x; p[0]=0; x[0].a; }));
+  ASSERT(1, ({ struct {char a; char b;} x[3]; char *p=x; p[1]=1; x[0].b; }));
+  ASSERT(2, ({ struct {char a; char b;} x[3]; char *p=x; p[2]=2; x[1].a; }));
+  ASSERT(3, ({ struct {char a; char b;} x[3]; char *p=x; p[3]=3; x[1].b; }));
+
+  ASSERT(6, ({ struct {char a[3]; char b[5];} x; char *p=&x; x.a[0]=6; p[0]; }));
+  ASSERT(7, ({ struct {char a[3]; char b[5];} x; char *p=&x; x.b[0]=7; p[3]; }));
+
+  ASSERT(6, ({ struct { struct { char b; } a; } x; x.a.b=6; x.a.b; }));
+
+  ASSERT(8, ({ struct {int a;} x; sizeof(x); }));
+  ASSERT(16, ({ struct {int a; int b;} x; sizeof(x); }));
+  ASSERT(16, ({ struct {int a, b;} x; sizeof(x); }));
+  ASSERT(24, ({ struct {int a[3];} x; sizeof(x); }));
+  ASSERT(32, ({ struct {int a;} x[4]; sizeof(x); }));
+  ASSERT(48, ({ struct {int a[3];} x[2]; sizeof(x); }));
+  ASSERT(2, ({ struct {char a; char b;} x; sizeof(x); }));
+  ASSERT(9, ({ struct {char a; int b;} x; sizeof(x); }));
+  ASSERT(0, ({ struct {} x; sizeof(x); }));
+
+  printf("OK\n");
+  return 0;
+}
diff --git a/tokenize.c b/tokenize.c
index 1c79253..aa3beab 100644
--- a/tokenize.c
+++ b/tokenize.c
@@ -124,6 +124,7 @@ static int read_punct(char *p) {
 static bool is_keyword(Token *tok) {
   static char *kw[] = {
     "return", "if", "else", "for", "while", "int", "sizeof", "char",
+    "struct",
   };
 
   for (int i = 0; i < sizeof(kw) / sizeof(*kw); i++)
diff --git a/type.c b/type.c
index 353bf99..eb36610 100644
--- a/type.c
+++ b/type.c
@@ -81,6 +81,9 @@ void add_type(Node *node) {
   case ND_COMMA:
     node->ty = node->rhs->ty;
     return;
+  case ND_MEMBER:
+    node->ty = node->member->ty;
+    return;
   case ND_ADDR:
     if (node->lhs->ty->kind == TY_ARRAY)
       node->ty = pointer_to(node->lhs->ty->base);
