diff --git a/chibicc.h b/chibicc.h
index 23f122e..1632b8c 100644
--- a/chibicc.h
+++ b/chibicc.h
@@ -356,6 +356,12 @@ void add_type(Node *node);
 void codegen(Obj *prog, FILE *out);
 int align_to(int n, int align);
 
+//
+// unicode.c
+//
+
+int encode_utf8(char *buf, uint32_t c);
+
 //
 // main.c
 //
diff --git a/test/unicode.c b/test/unicode.c
new file mode 100644
index 0000000..c0ac434
--- /dev/null
+++ b/test/unicode.c
@@ -0,0 +1,14 @@
+#include "test.h"
+
+int main() {
+  ASSERT(4, sizeof(L'\0'));
+  ASSERT(97, L'a');
+
+  ASSERT(0, strcmp("Î±Î²Î³", "\u03B1\u03B2\u03B3"));
+  ASSERT(0, strcmp("æ—¥æœ¬èªž", "\u65E5\u672C\u8A9E"));
+  ASSERT(0, strcmp("æ—¥æœ¬èªž", "\U000065E5\U0000672C\U00008A9E"));
+  ASSERT(0, strcmp("ðŸŒ®", "\U0001F32E"));
+
+  printf("OK\n");
+  return 0;
+}
diff --git a/tokenize.c b/tokenize.c
index 3fd5a1b..120efc4 100644
--- a/tokenize.c
+++ b/tokenize.c
@@ -608,6 +608,48 @@ static void remove_backslash_newline(char *p) {
   p[j] = '\0';
 }
 
+static uint32_t read_universal_char(char *p, int len) {
+  uint32_t c = 0;
+  for (int i = 0; i < len; i++) {
+    if (!isxdigit(p[i]))
+      return 0;
+    c = (c << 4) | from_hex(p[i]);
+  }
+  return c;
+}
+
+// Replace \u or \U escape sequences with corresponding UTF-8 bytes.
+static void convert_universal_chars(char *p) {
+  char *q = p;
+
+  while (*p) {
+    if (startswith(p, "\\u")) {
+      uint32_t c = read_universal_char(p + 2, 4);
+      if (c) {
+        p += 6;
+        q += encode_utf8(q, c);
+      } else {
+        *q++ = *p++;
+      }
+    } else if (startswith(p, "\\U")) {
+      uint32_t c = read_universal_char(p + 2, 8);
+      if (c) {
+        p += 10;
+        q += encode_utf8(q, c);
+      } else {
+        *q++ = *p++;
+      }
+    } else if (p[0] == '\\') {
+      *q++ = *p++;
+      *q++ = *p++;
+    } else {
+      *q++ = *p++;
+    }
+  }
+
+  *q = '\0';
+}
+
 Token *tokenize_file(char *path) {
   char *p = read_file(path);
   if (!p)
@@ -615,6 +657,7 @@ Token *tokenize_file(char *path) {
 
   canonicalize_newline(p);
   remove_backslash_newline(p);
+  convert_universal_chars(p);
 
   // Save the filename for assembler .file directive.
   static int file_no;
diff --git a/unicode.c b/unicode.c
new file mode 100644
index 0000000..9f0d881
--- /dev/null
+++ b/unicode.c
@@ -0,0 +1,28 @@
+#include "chibicc.h"
+
+// Encode a given character in UTF-8.
+int encode_utf8(char *buf, uint32_t c) {
+  if (c <= 0x7F) {
+    buf[0] = c;
+    return 1;
+  }
+
+  if (c <= 0x7FF) {
+    buf[0] = 0b11000000 | (c >> 6);
+    buf[1] = 0b10000000 | (c & 0b00111111);
+    return 2;
+  }
+
+  if (c <= 0xFFFF) {
+    buf[0] = 0b11100000 | (c >> 12);
+    buf[1] = 0b10000000 | ((c >> 6) & 0b00111111);
+    buf[2] = 0b10000000 | (c & 0b00111111);
+    return 3;
+  }
+
+  buf[0] = 0b11110000 | (c >> 18);
+  buf[1] = 0b10000000 | ((c >> 12) & 0b00111111);
+  buf[2] = 0b10000000 | ((c >> 6) & 0b00111111);
+  buf[3] = 0b10000000 | (c & 0b00111111);
+  return 4;
+}
