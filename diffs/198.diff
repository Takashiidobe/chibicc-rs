diff --git a/codegen.c b/codegen.c
index e981582..392bf0f 100644
--- a/codegen.c
+++ b/codegen.c
@@ -299,10 +299,58 @@ static void cast(Type *from, Type *to) {
     println("  %s", cast_table[t1][t2]);
 }
 
+// Structs or unions equal or smaller than 16 bytes are passed
+// using up to two registers.
+//
+// If the first 8 bytes contains only floating-point type members,
+// they are passed in an XMM register. Otherwise, they are passed
+// in a general-purpose register.
+//
+// If a struct/union is larger than 8 bytes, the same rule is
+// applied to the the next 8 byte chunk.
+//
+// This function returns true if `ty` has only floating-point
+// members in its byte range [lo, hi).
+static bool has_flonum(Type *ty, int lo, int hi, int offset) {
+  if (ty->kind == TY_STRUCT || ty->kind == TY_UNION) {
+    for (Member *mem = ty->members; mem; mem = mem->next)
+      if (!has_flonum(mem->ty, lo, hi, offset + mem->offset))
+        return false;
+    return true;
+  }
+
+  if (ty->kind == TY_ARRAY) {
+    for (int i = 0; i < ty->array_len; i++)
+      if (!has_flonum(ty->base, lo, hi, offset + ty->base->size * i))
+        return false;
+    return true;
+  }
+
+  return offset < lo || hi <= offset || is_flonum(ty);
+}
+
+static bool has_flonum1(Type *ty) {
+  return has_flonum(ty, 0, 8, 0);
+}
+
+static bool has_flonum2(Type *ty) {
+  return has_flonum(ty, 8, 16, 0);
+}
+
+static void push_struct(Type *ty) {
+  int sz = align_to(ty->size, 8);
+  println("  sub $%d, %%rsp", sz);
+  depth += sz / 8;
+
+  for (int i = 0; i < ty->size; i++) {
+    println("  mov %d(%%rax), %%r10b", i);
+    println("  mov %%r10b, %d(%%rsp)", i);
+  }
+}
+
 static void push_args2(Node *args, bool first_pass) {
   if (!args)
     return;
-
   push_args2(args->next, first_pass);
 
   if ((first_pass && !args->pass_by_stack) || (!first_pass && args->pass_by_stack))
@@ -310,10 +358,18 @@ static void push_args2(Node *args, bool first_pass) {
 
   gen_expr(args);
 
-  if (is_flonum(args->ty))
+  switch (args->ty->kind) {
+  case TY_STRUCT:
+  case TY_UNION:
+    push_struct(args->ty);
+    break;
+  case TY_FLOAT:
+  case TY_DOUBLE:
     pushf();
-  else
+    break;
+  default:
     push();
+  }
 }
 
 // Load function call arguments. Arguments are already evaluated and
@@ -339,12 +395,35 @@ static int push_args(Node *args) {
   int stack = 0, gp = 0, fp = 0;
 
   for (Node *arg = args; arg; arg = arg->next) {
-    if (is_flonum(arg->ty)) {
+    Type *ty = arg->ty;
+
+    switch (ty->kind) {
+    case TY_STRUCT:
+    case TY_UNION:
+      if (ty->size > 16) {
+        arg->pass_by_stack = true;
+        stack += align_to(ty->size, 8) / 8;
+      } else {
+        bool fp1 = has_flonum1(ty);
+        bool fp2 = has_flonum2(ty);
+
+        if (fp + fp1 + fp2 < FP_MAX && gp + !fp1 + !fp2 < GP_MAX) {
+          fp = fp + fp1 + fp2;
+          gp = gp + !fp1 + !fp2;
+        } else {
+          arg->pass_by_stack = true;
+          stack += align_to(ty->size, 8) / 8;
+        }
+      }
+      break;
+    case TY_FLOAT:
+    case TY_DOUBLE:
       if (fp++ >= FP_MAX) {
         arg->pass_by_stack = true;
         stack++;
       }
-    } else {
+      break;
+    default:
       if (gp++ >= GP_MAX) {
         arg->pass_by_stack = true;
         stack++;
@@ -504,10 +583,37 @@ static void gen_expr(Node *node) {
 
     int gp = 0, fp = 0;
     for (Node *arg = node->args; arg; arg = arg->next) {
-      if (is_flonum(arg->ty)) {
+      Type *ty = arg->ty;
+
+      switch (ty->kind) {
+      case TY_STRUCT:
+      case TY_UNION:
+        if (ty->size > 16)
+          continue;
+
+        bool fp1 = has_flonum1(ty);
+        bool fp2 = has_flonum2(ty);
+
+        if (fp + fp1 + fp2 < FP_MAX && gp + !fp1 + !fp2 < GP_MAX) {
+          if (fp1)
+            popf(fp++);
+          else
+            pop(argreg64[gp++]);
+
+          if (ty->size > 8) {
+            if (fp2)
+              popf(fp++);
+            else
+              pop(argreg64[gp++]);
+          }
+        }
+        break;
+      case TY_FLOAT:
+      case TY_DOUBLE:
         if (fp < FP_MAX)
           popf(fp++);
-      } else {
+        break;
+      default:
         if (gp < GP_MAX)
           pop(argreg64[gp++]);
       }
diff --git a/parse.c b/parse.c
index f9dc7f3..5ff6f13 100644
--- a/parse.c
+++ b/parse.c
@@ -2215,9 +2215,8 @@ static Node *funcall(Token **rest, Token *tok, Node *fn) {
       error_tok(tok, "too many arguments");
 
     if (param_ty) {
-      if (param_ty->kind == TY_STRUCT || param_ty->kind == TY_UNION)
-        error_tok(arg->tok, "passing struct or union is not supported yet");
-      arg = new_cast(arg, param_ty);
+      if (param_ty->kind != TY_STRUCT && param_ty->kind != TY_UNION)
+        arg = new_cast(arg, param_ty);
       param_ty = param_ty->next;
     } else if (arg->ty->kind == TY_FLOAT) {
       // If parameter type is omitted (e.g. in "..."), float
diff --git a/test/common b/test/common
index 6d8b24c..6d01816 100644
--- a/test/common
+++ b/test/common
@@ -58,3 +58,37 @@ float add10_float(float x1, float x2, float x3, float x4, float x5, float x6, fl
 double add10_double(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10) {
   return x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10;
 }
+
+typedef struct { int a,b; short c; char d; } Ty4;
+typedef struct { int a; float b; double c; } Ty5;
+typedef struct { unsigned char a[3]; } Ty6;
+typedef struct { long a, b, c; } Ty7;
+
+int struct_test4(Ty4 x, int n) {
+  switch (n) {
+  case 0: return x.a;
+  case 1: return x.b;
+  case 2: return x.c;
+  default: return x.d;
+  }
+}
+
+int struct_test5(Ty5 x, int n) {
+  switch (n) {
+  case 0: return x.a;
+  case 1: return x.b;
+  default: return x.c;
+  }
+}
+
+int struct_test6(Ty6 x, int n) {
+  return x.a[n];
+}
+
+int struct_test7(Ty7 x, int n) {
+  switch (n) {
+  case 0: return x.a;
+  case 1: return x.b;
+  default: return x.c;
+  }
+}
diff --git a/test/function.c b/test/function.c
index cc5ed82..abb0c96 100644
--- a/test/function.c
+++ b/test/function.c
@@ -141,6 +141,16 @@ int many_args3(int a, double b, int c, int d, double e, int f,
   return o / p;
 }
 
+typedef struct { int a,b; short c; char d; } Ty4;
+typedef struct { int a; float b; double c; } Ty5;
+typedef struct { unsigned char a[3]; } Ty6;
+typedef struct { long a, b, c; } Ty7;
+
+int struct_test5(Ty5 x, int n);
+int struct_test4(Ty4 x, int n);
+int struct_test6(Ty6 x, int n);
+int struct_test7(Ty7 x, int n);
+
 int main() {
   ASSERT(3, ret3());
   ASSERT(8, add2(3, 5));
@@ -235,6 +245,23 @@ int main() {
   ASSERT(4, many_args2(1,2,3,4,5,6,7,8,40,10));
   ASSERT(8, many_args3(1,2,3,4,5,6,7,8,9,10,11,12,13,14,80,10));
 
+  ASSERT(10, ({ Ty4 x={10,20,30,40}; struct_test4(x, 0); }));
+  ASSERT(20, ({ Ty4 x={10,20,30,40}; struct_test4(x, 1); }));
+  ASSERT(30, ({ Ty4 x={10,20,30,40}; struct_test4(x, 2); }));
+  ASSERT(40, ({ Ty4 x={10,20,30,40}; struct_test4(x, 3); }));
+
+  ASSERT(10, ({ Ty5 x={10,20,30}; struct_test5(x, 0); }));
+  ASSERT(20, ({ Ty5 x={10,20,30}; struct_test5(x, 1); }));
+  ASSERT(30, ({ Ty5 x={10,20,30}; struct_test5(x, 2); }));
+
+  ASSERT(10, ({ Ty6 x={10,20,30}; struct_test6(x, 0); }));
+  ASSERT(20, ({ Ty6 x={10,20,30}; struct_test6(x, 1); }));
+  ASSERT(30, ({ Ty6 x={10,20,30}; struct_test6(x, 2); }));
+
+  ASSERT(10, ({ Ty7 x={10,20,30}; struct_test7(x, 0); }));
+  ASSERT(20, ({ Ty7 x={10,20,30}; struct_test7(x, 1); }));
+  ASSERT(30, ({ Ty7 x={10,20,30}; struct_test7(x, 2); }));
+
   printf("OK\n");
   return 0;
 }
