diff --git a/codegen.c b/codegen.c
index cbbe25f..4f873f5 100644
--- a/codegen.c
+++ b/codegen.c
@@ -32,7 +32,13 @@ static int align_to(int n, int align) {
 static void gen_addr(Node *node) {
   switch (node->kind) {
   case ND_VAR:
-    printf("  lea %d(%%rbp), %%rax\n", node->var->offset);
+    if (node->var->is_local) {
+      // Local variable
+      printf("  lea %d(%%rbp), %%rax\n", node->var->offset);
+    } else {
+      // Global variable
+      printf("  lea %s(%%rip), %%rax\n", node->var->name);
+    }
     return;
   case ND_DEREF:
     gen_expr(node->lhs);
@@ -211,9 +217,19 @@ static void assign_lvar_offsets(Obj *prog) {
   }
 }
 
-void codegen(Obj *prog) {
-  assign_lvar_offsets(prog);
+static void emit_data(Obj *prog) {
+  for (Obj *var = prog; var; var = var->next) {
+    if (var->is_function)
+      continue;
 
+    printf("  .data\n");
+    printf("  .globl %s\n", var->name);
+    printf("%s:\n", var->name);
+    printf("  .zero %d\n", var->ty->size);
+  }
+}
+
+static void emit_text(Obj *prog) {
   for (Obj *fn = prog; fn; fn = fn->next) {
     if (!fn->is_function)
       continue;
@@ -244,3 +260,9 @@ void codegen(Obj *prog) {
     printf("  ret\n");
   }
 }
+
+void codegen(Obj *prog) {
+  assign_lvar_offsets(prog);
+  emit_data(prog);
+  emit_text(prog);
+}
diff --git a/parse.c b/parse.c
index 059fcb9..ecf7b0a 100644
--- a/parse.c
+++ b/parse.c
@@ -44,6 +44,11 @@ static Obj *find_var(Token *tok) {
   for (Obj *var = locals; var; var = var->next)
     if (strlen(var->name) == tok->len && !strncmp(tok->loc, var->name, tok->len))
       return var;
+
+  for (Obj *var = globals; var; var = var->next)
+    if (strlen(var->name) == tok->len && !strncmp(tok->loc, var->name, tok->len))
+      return var;
+
   return NULL;
 }
 
@@ -574,13 +579,47 @@ static Token *function(Token *tok, Type *basety) {
   return tok;
 }
 
+static Token *global_variable(Token *tok, Type *basety) {
+  bool first = true;
+
+  while (!consume(&tok, tok, ";")) {
+    if (!first)
+      tok = skip(tok, ",");
+    first = false;
+
+    Type *ty = declarator(&tok, tok, basety);
+    new_gvar(get_ident(ty->name), ty);
+  }
+  return tok;
+}
+
+// Lookahead tokens and returns true if a given token is a start
+// of a function definition or declaration.
+static bool is_function(Token *tok) {
+  if (equal(tok, ";"))
+    return false;
+
+  Type dummy = {};
+  Type *ty = declarator(&tok, tok, &dummy);
+  return ty->kind == TY_FUNC;
+}
+
 // program = (function-definition | global-variable)*
 Obj *parse(Token *tok) {
   globals = NULL;
 
   while (tok->kind != TK_EOF) {
     Type *basety = declspec(&tok, tok);
-    tok = function(tok, basety);
+
+    // Function
+    if (is_function(tok)) {
+      tok = function(tok, basety);
+      continue;
+    }
+
+    // Global variable
+    tok = global_variable(tok, basety);
+
   }
   return globals;
 }
diff --git a/test.sh b/test.sh
index 8bc6a42..29f30da 100755
--- a/test.sh
+++ b/test.sh
@@ -151,4 +151,16 @@ assert 8 'int main() { int x[3][4]; return sizeof(**x + 1); }'
 assert 8 'int main() { int x=1; return sizeof(x=2); }'
 assert 1 'int main() { int x=1; sizeof(x=2); return x; }'
 
+assert 0 'int x; int main() { return x; }'
+assert 3 'int x; int main() { x=3; return x; }'
+assert 7 'int x; int y; int main() { x=3; y=4; return x+y; }'
+assert 7 'int x, y; int main() { x=3; y=4; return x+y; }'
+assert 0 'int x[4]; int main() { x[0]=0; x[1]=1; x[2]=2; x[3]=3; return x[0]; }'
+assert 1 'int x[4]; int main() { x[0]=0; x[1]=1; x[2]=2; x[3]=3; return x[1]; }'
+assert 2 'int x[4]; int main() { x[0]=0; x[1]=1; x[2]=2; x[3]=3; return x[2]; }'
+assert 3 'int x[4]; int main() { x[0]=0; x[1]=1; x[2]=2; x[3]=3; return x[3]; }'
+
+assert 8 'int x; int main() { return sizeof(x); }'
+assert 32 'int x[4]; int main() { return sizeof(x); }'
+
 echo OK
