diff --git a/preprocess.c b/preprocess.c
index 785d0e4..9588868 100644
--- a/preprocess.c
+++ b/preprocess.c
@@ -4,7 +4,7 @@
 typedef struct CondIncl CondIncl;
 struct CondIncl {
   CondIncl *next;
-  enum { IN_THEN, IN_ELSE } ctx;
+  enum { IN_THEN, IN_ELIF, IN_ELSE } ctx;
   Token *tok;
   bool included;
 };
@@ -67,7 +67,7 @@ static Token *skip_cond_incl2(Token *tok) {
   return tok;
 }
 
-// Skip until next `#else` or `#endif`.
+// Skip until next `#else`, `#elif` or `#endif`.
 // Nested `#if` and `#endif` are skipped.
 static Token *skip_cond_incl(Token *tok) {
   while (tok->kind != TK_EOF) {
@@ -77,7 +77,8 @@ static Token *skip_cond_incl(Token *tok) {
     }
 
     if (is_hash(tok) &&
-        (equal(tok->next, "else") || equal(tok->next, "endif")))
+        (equal(tok->next, "elif") || equal(tok->next, "else") ||
+         equal(tok->next, "endif")))
       break;
     tok = tok->next;
   }
@@ -169,6 +170,18 @@ static Token *preprocess2(Token *tok) {
       continue;
     }
 
+    if (equal(tok, "elif")) {
+      if (!cond_incl || cond_incl->ctx == IN_ELSE)
+        error_tok(start, "stray #elif");
+      cond_incl->ctx = IN_ELIF;
+
+      if (!cond_incl->included && eval_const_expr(&tok, tok))
+        cond_incl->included = true;
+      else
+        tok = skip_cond_incl(tok);
+      continue;
+    }
+
     if (equal(tok, "else")) {
       if (!cond_incl || cond_incl->ctx == IN_ELSE)
         error_tok(start, "stray #else");
diff --git a/test/macro.c b/test/macro.c
index ccefaae..0abae2b 100644
--- a/test/macro.c
+++ b/test/macro.c
@@ -62,6 +62,46 @@ int main() {
 #endif
   assert(2, m, "m");
 
+#if 1
+  m = 2;
+#else
+  m = 3;
+#endif
+  assert(2, m, "m");
+
+#if 0
+  m = 1;
+#elif 0
+  m = 2;
+#elif 3+5
+  m = 3;
+#elif 1*5
+  m = 4;
+#endif
+  assert(3, m, "m");
+
+#if 1+5
+  m = 1;
+#elif 1
+  m = 2;
+#elif 3
+  m = 2;
+#endif
+  assert(1, m, "m");
+
+#if 0
+  m = 1;
+#elif 1
+# if 1
+  m = 2;
+# else
+  m = 3;
+# endif
+#else
+  m = 5;
+#endif
+  assert(2, m, "m");
+
   printf("OK\n");
   return 0;
 }
