diff --git a/preprocess.c b/preprocess.c
index 4f295d1..785d0e4 100644
--- a/preprocess.c
+++ b/preprocess.c
@@ -4,7 +4,9 @@
 typedef struct CondIncl CondIncl;
 struct CondIncl {
   CondIncl *next;
+  enum { IN_THEN, IN_ELSE } ctx;
   Token *tok;
+  bool included;
 };
 
 static CondIncl *cond_incl;
@@ -52,16 +54,30 @@ static Token *append(Token *tok1, Token *tok2) {
   return head.next;
 }
 
-// Skip until next `#endif`.
+static Token *skip_cond_incl2(Token *tok) {
+  while (tok->kind != TK_EOF) {
+    if (is_hash(tok) && equal(tok->next, "if")) {
+      tok = skip_cond_incl2(tok->next->next);
+      continue;
+    }
+    if (is_hash(tok) && equal(tok->next, "endif"))
+      return tok->next->next;
+    tok = tok->next;
+  }
+  return tok;
+}
+
+// Skip until next `#else` or `#endif`.
 // Nested `#if` and `#endif` are skipped.
 static Token *skip_cond_incl(Token *tok) {
   while (tok->kind != TK_EOF) {
     if (is_hash(tok) && equal(tok->next, "if")) {
-      tok = skip_cond_incl(tok->next->next);
-      tok = tok->next;
+      tok = skip_cond_incl2(tok->next->next);
       continue;
     }
-    if (is_hash(tok) && equal(tok->next, "endif"))
+
+    if (is_hash(tok) &&
+        (equal(tok->next, "else") || equal(tok->next, "endif")))
       break;
     tok = tok->next;
   }
@@ -98,10 +114,12 @@ static long eval_const_expr(Token **rest, Token *tok) {
   return val;
 }
 
-static CondIncl *push_cond_incl(Token *tok) {
+static CondIncl *push_cond_incl(Token *tok, bool included) {
   CondIncl *ci = calloc(1, sizeof(CondIncl));
   ci->next = cond_incl;
+  ci->ctx = IN_THEN;
   ci->tok = tok;
+  ci->included = included;
   cond_incl = ci;
   return ci;
 }
@@ -145,12 +163,23 @@ static Token *preprocess2(Token *tok) {
 
     if (equal(tok, "if")) {
       long val = eval_const_expr(&tok, tok);
-      push_cond_incl(start);
+      push_cond_incl(start, val);
       if (!val)
         tok = skip_cond_incl(tok);
       continue;
     }
 
+    if (equal(tok, "else")) {
+      if (!cond_incl || cond_incl->ctx == IN_ELSE)
+        error_tok(start, "stray #else");
+      cond_incl->ctx = IN_ELSE;
+      tok = skip_line(tok->next);
+
+      if (cond_incl->included)
+        tok = skip_cond_incl(tok);
+      continue;
+    }
+
     if (equal(tok, "endif")) {
       if (!cond_incl)
         error_tok(start, "stray #endif");
diff --git a/test/macro.c b/test/macro.c
index 9998382..ccefaae 100644
--- a/test/macro.c
+++ b/test/macro.c
@@ -28,6 +28,40 @@ int main() {
 #endif
   assert(5, m, "m");
 
+#if 1
+# if 0
+#  if 1
+    foo bar
+#  endif
+# endif
+      m = 3;
+#endif
+    assert(3, m, "m");
+
+#if 1-1
+# if 1
+# endif
+# if 1
+# else
+# endif
+# if 0
+# else
+# endif
+  m = 2;
+#else
+# if 1
+  m = 3;
+# endif
+#endif
+  assert(3, m, "m");
+
+#if 1
+  m = 2;
+#else
+  m = 3;
+#endif
+  assert(2, m, "m");
+
   printf("OK\n");
   return 0;
 }
