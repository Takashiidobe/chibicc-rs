diff --git a/test.sh b/test.sh
index b78d899..67eb37e 100755
--- a/test.sh
+++ b/test.sh
@@ -198,4 +198,9 @@ assert 120 'int main() { return "\ax\ny"[1]; }'
 assert 10 'int main() { return "\ax\ny"[2]; }'
 assert 121 'int main() { return "\ax\ny"[3]; }'
 
+assert 0 'int main() { return "\0"[0]; }'
+assert 16 'int main() { return "\20"[0]; }'
+assert 65 'int main() { return "\101"[0]; }'
+assert 104 'int main() { return "\1500"[0]; }'
+
 echo OK
diff --git a/tokenize.c b/tokenize.c
index fb1bc48..403211f 100644
--- a/tokenize.c
+++ b/tokenize.c
@@ -99,7 +99,21 @@ static bool is_keyword(Token *tok) {
   return false;
 }
 
-static int read_escaped_char(char *p) {
+static int read_escaped_char(char **new_pos, char *p) {
+  if ('0' <= *p && *p <= '7') {
+    // Read an octal number.
+    int c = *p++ - '0';
+    if ('0' <= *p && *p <= '7') {
+      c = (c << 3) + (*p++ - '0');
+      if ('0' <= *p && *p <= '7')
+        c = (c << 3) + (*p++ - '0');
+    }
+    *new_pos = p;
+    return c;
+  }
+
+  *new_pos = p + 1;
+
   // Escape sequences are defined using themselves here. E.g.
   // '\n' is implemented using '\n'. This tautological definition
   // works because the compiler that compiles our compiler knows
@@ -143,12 +157,10 @@ static Token *read_string_literal(char *start) {
   int len = 0;
 
   for (char *p = start + 1; p < end;) {
-    if (*p == '\\') {
-      buf[len++] = read_escaped_char(p + 1);
-      p += 2;
-    } else {
+    if (*p == '\\')
+      buf[len++] = read_escaped_char(&p, p + 1);
+    else
       buf[len++] = *p++;
-    }
   }
 
   Token *tok = new_token(TK_STR, start, end + 1);
