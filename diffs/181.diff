diff --git a/test/literal.c b/test/literal.c
index bc7c173..c0fa499 100644
--- a/test/literal.c
+++ b/test/literal.c
@@ -91,6 +91,10 @@ int main() {
   ASSERT(8, sizeof(5.l));
   ASSERT(8, sizeof(2.0L));
 
+  assert(1, size\
+of(char), \
+         "sizeof(char)");
+
   printf("OK\n");
   return 0;
 }
diff --git a/tokenize.c b/tokenize.c
index 7ab7369..4c746e1 100644
--- a/tokenize.c
+++ b/tokenize.c
@@ -533,11 +533,41 @@ File *new_file(char *name, int file_no, char *contents) {
   return file;
 }
 
+// Removes backslashes followed by a newline.
+static void remove_backslash_newline(char *p) {
+  int i = 0, j = 0;
+
+  // We want to keep the number of newline characters so that
+  // the logical line number matches the physical one.
+  // This counter maintain the number of newlines we have removed.
+  int n = 0;
+
+  while (p[i]) {
+    if (p[i] == '\\' && p[i + 1] == '\n') {
+      i += 2;
+      n++;
+    } else if (p[i] == '\n') {
+      p[j++] = p[i++];
+      for (; n > 0; n--)
+        p[j++] = '\n';
+    } else {
+      p[j++] = p[i++];
+    }
+  }
+
+  for (; n > 0; n--)
+    p[j++] = '\n';
+  p[j] = '\0';
+}
+
 Token *tokenize_file(char *path) {
   char *p = read_file(path);
   if (!p)
     return NULL;
 
+  remove_backslash_newline(p);
+
+  // Save the filename for assembler .file directive.
   static int file_no;
   File *file = new_file(path, file_no + 1, p);
 
