diff --git a/chibicc.h b/chibicc.h
index b850385..88beb88 100644
--- a/chibicc.h
+++ b/chibicc.h
@@ -183,7 +183,6 @@ struct Node {
   Member *member;
 
   // Function call
-  char *funcname;
   Type *func_ty;
   Node *args;
 
diff --git a/codegen.c b/codegen.c
index 29e064d..61de84f 100644
--- a/codegen.c
+++ b/codegen.c
@@ -57,13 +57,46 @@ int align_to(int n, int align) {
 static void gen_addr(Node *node) {
   switch (node->kind) {
   case ND_VAR:
+    // Local variable
     if (node->var->is_local) {
-      // Local variable
       println("  lea %d(%%rbp), %%rax", node->var->offset);
-    } else {
-      // Global variable
-      println("  lea %s(%%rip), %%rax", node->var->name);
+      return;
+    }
+
+    // Here, we generate an absolute address of a function or a global
+    // variable. Even though they exist at a certain address at runtime,
+    // their addresses are not known at link-time for the following
+    // two reasons.
+    //
+    //  - Address randomization: Executables are loaded to memory as a
+    //    whole but it is not known what address they are loaded to.
+    //    Therefore, at link-time, relative address in the same
+    //    exectuable (i.e. the distance between two functions in the
+    //    same executable) is known, but the absolute address is not
+    //    known.
+    //
+    //  - Dynamic linking: Dynamic shared objects (DSOs) or .so files
+    //    are loaded to memory alongside an executable at runtime and
+    //    linked by the runtime loader in memory. We know nothing
+    //    about addresses of global stuff that may be defined by DSOs
+    //    until the runtime relocation is complete.
+    //
+    // In order to deal with the former case, we use RIP-relative
+    // addressing, denoted by `(%rip)`. For the latter, we obtain an
+    // address of a stuff that may be in a shared object file from the
+    // Global Offset Table using `@GOTPCREL(%rip)` notation.
+
+    // Function
+    if (node->ty->kind == TY_FUNC) {
+      if (node->var->is_definition)
+        println("  lea %s(%%rip), %%rax", node->var->name);
+      else
+        println("  mov %s@GOTPCREL(%%rip), %%rax", node->var->name);
+      return;
     }
+
+    // Global variable
+    println("  lea %s(%%rip), %%rax", node->var->name);
     return;
   case ND_DEREF:
     gen_expr(node->lhs);
@@ -87,6 +120,7 @@ static void load(Type *ty) {
   case TY_ARRAY:
   case TY_STRUCT:
   case TY_UNION:
+  case TY_FUNC:
     // If it is an array, do not attempt to load a value to the
     // register because in general we can't load an entire array to a
     // register. As a result, the result of an evaluation of an array
@@ -411,6 +445,7 @@ static void gen_expr(Node *node) {
   }
   case ND_FUNCALL: {
     push_args(node->args);
+    gen_expr(node->lhs);
 
     int gp = 0, fp = 0;
     for (Node *arg = node->args; arg; arg = arg->next) {
@@ -421,10 +456,10 @@ static void gen_expr(Node *node) {
     }
 
     if (depth % 2 == 0) {
-      println("  call %s", node->funcname);
+      println("  call *%%rax");
     } else {
       println("  sub $8, %%rsp");
-      println("  call %s", node->funcname);
+      println("  call *%%rax");
       println("  add $8, %%rsp");
     }
 
diff --git a/parse.c b/parse.c
index cd54e07..203ad44 100644
--- a/parse.c
+++ b/parse.c
@@ -147,6 +147,7 @@ static Node *cast(Token **rest, Token *tok);
 static Type *struct_decl(Token **rest, Token *tok);
 static Type *union_decl(Token **rest, Token *tok);
 static Node *postfix(Token **rest, Token *tok);
+static Node *funcall(Token **rest, Token *tok, Node *node);
 static Node *unary(Token **rest, Token *tok);
 static Node *primary(Token **rest, Token *tok);
 static Token *parse_typedef(Token *tok, Type *basety);
@@ -2108,7 +2109,15 @@ static Node *new_inc_dec(Node *node, Token *tok, int addend) {
 }
 
 // postfix = "(" type-name ")" "{" initializer-list "}"
-//         | primary ("[" expr "]" | "." ident | "->" ident | "++" | "--")*
+//         = ident "(" func-args ")" postfix-tail*
+//         | primary postfix-tail*
+//
+// postfix-tail = "[" expr "]"
+//              | "(" func-args ")"
+//              | "." ident
+//              | "->" ident
+//              | "++"
+//              | "--"
 static Node *postfix(Token **rest, Token *tok) {
   if (equal(tok, "(") && is_typename(tok->next)) {
     // Compound literal
@@ -2131,6 +2140,11 @@ static Node *postfix(Token **rest, Token *tok) {
   Node *node = primary(&tok, tok);
 
   for (;;) {
+    if (equal(tok, "(")) {
+      node = funcall(&tok, tok->next, node);
+      continue;
+    }
+
     if (equal(tok, "[")) {
       // x[y] is short for *(x+y)
       Token *start = tok;
@@ -2171,18 +2185,15 @@ static Node *postfix(Token **rest, Token *tok) {
   }
 }
 
-// funcall = ident "(" (assign ("," assign)*)? ")"
-static Node *funcall(Token **rest, Token *tok) {
-  Token *start = tok;
-  tok = tok->next->next;
+// funcall = (assign ("," assign)*)? ")"
+static Node *funcall(Token **rest, Token *tok, Node *fn) {
+  add_type(fn);
 
-  VarScope *sc = find_var(start);
-  if (!sc)
-    error_tok(start, "implicit declaration of a function");
-  if (!sc->var || sc->var->ty->kind != TY_FUNC)
-    error_tok(start, "not a function");
+  if (fn->ty->kind != TY_FUNC &&
+      (fn->ty->kind != TY_PTR || fn->ty->base->kind != TY_FUNC))
+    error_tok(fn->tok, "not a function");
 
-  Type *ty = sc->var->ty;
+  Type *ty = (fn->ty->kind == TY_FUNC) ? fn->ty : fn->ty->base;
   Type *param_ty = ty->params;
 
   Node head = {};
@@ -2217,8 +2228,7 @@ static Node *funcall(Token **rest, Token *tok) {
 
   *rest = skip(tok, ")");
 
-  Node *node = new_node(ND_FUNCALL, start);
-  node->funcname = strndup(start->loc, start->len);
+  Node *node = new_unary(ND_FUNCALL, fn, tok);
   node->func_ty = ty;
   node->ty = ty->return_ty;
   node->args = head.next;
@@ -2231,7 +2241,7 @@ static Node *funcall(Token **rest, Token *tok) {
 //         | "sizeof" unary
 //         | "_Alignof" "(" type-name ")"
 //         | "_Alignof" unary
-//         | ident func-args?
+//         | ident
 //         | str
 //         | num
 static Node *primary(Token **rest, Token *tok) {
@@ -2276,23 +2286,20 @@ static Node *primary(Token **rest, Token *tok) {
   }
 
   if (tok->kind == TK_IDENT) {
-    // Function call
-    if (equal(tok->next, "("))
-      return funcall(rest, tok);
-
     // Variable or enum constant
     VarScope *sc = find_var(tok);
-    if (!sc || (!sc->var && !sc->enum_ty))
-      error_tok(tok, "undefined variable");
+    *rest = tok->next;
 
-    Node *node;
-    if (sc->var)
-      node = new_var_node(sc->var, tok);
-    else
-      node = new_num(sc->enum_val, tok);
+    if (sc) {
+      if (sc->var)
+        return new_var_node(sc->var, tok);
+      if (sc->enum_ty)
+        return new_num(sc->enum_val, tok);
+    }
 
-    *rest = tok->next;
-    return node;
+    if (equal(tok->next, "("))
+      error_tok(tok, "implicit declaration of a function");
+    error_tok(tok, "undefined variable");
   }
 
   if (tok->kind == TK_STR) {
diff --git a/test/function.c b/test/function.c
index 03813ee..94038bc 100644
--- a/test/function.c
+++ b/test/function.c
@@ -108,6 +108,10 @@ double add_double3(double x, double y, double z) {
   return x + y + z;
 }
 
+int (*fnptr(int (*fn)(int n, ...)))(int, ...) {
+  return fn;
+}
+
 int main() {
   ASSERT(3, ret3());
   ASSERT(8, add2(3, 5));
@@ -178,6 +182,11 @@ int main() {
 
   ASSERT(0, ({ char buf[100]; fmt(buf, "%.1f", (float)3.5); strcmp(buf, "3.5"); }));
 
+  ASSERT(5, (add2)(2,3));
+  ASSERT(5, (&add2)(2,3));
+  ASSERT(7, ({ int (*fn)(int,int) = add2; fn(2,5); }));
+  ASSERT(6, fnptr(add_all)(3, 1, 2, 3));
+
   printf("OK\n");
   return 0;
 }
diff --git a/type.c b/type.c
index 6c3a14d..299307f 100644
--- a/type.c
+++ b/type.c
@@ -190,12 +190,14 @@ void add_type(Node *node) {
   case ND_MEMBER:
     node->ty = node->member->ty;
     return;
-  case ND_ADDR:
-    if (node->lhs->ty->kind == TY_ARRAY)
-      node->ty = pointer_to(node->lhs->ty->base);
+  case ND_ADDR: {
+    Type *ty = node->lhs->ty;
+    if (ty->kind == TY_ARRAY)
+      node->ty = pointer_to(ty->base);
     else
-      node->ty = pointer_to(node->lhs->ty);
+      node->ty = pointer_to(ty);
     return;
+  }
   case ND_DEREF:
     if (!node->lhs->ty->base)
       error_tok(node->tok, "invalid pointer dereference");
