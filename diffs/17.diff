diff --git a/chibicc.h b/chibicc.h
index d380cdb..a504fc9 100644
--- a/chibicc.h
+++ b/chibicc.h
@@ -84,6 +84,7 @@ typedef enum {
 struct Node {
   NodeKind kind; // Node kind
   Node *next;    // Next node
+  Token *tok;    // Representative token
 
   Node *lhs;     // Left-hand side
   Node *rhs;     // Right-hand side
diff --git a/codegen.c b/codegen.c
index 827a632..477bd55 100644
--- a/codegen.c
+++ b/codegen.c
@@ -31,7 +31,7 @@ static void gen_addr(Node *node) {
     return;
   }
 
-  error("not an lvalue");
+  error_tok(node->tok, "not an lvalue");
 }
 
 // Generate code for a given node.
@@ -95,7 +95,7 @@ static void gen_expr(Node *node) {
     return;
   }
 
-  error("invalid expression");
+  error_tok(node->tok, "invalid expression");
 }
 
 static void gen_stmt(Node *node) {
@@ -143,7 +143,7 @@ static void gen_stmt(Node *node) {
     return;
   }
 
-  error("invalid statement");
+  error_tok(node->tok, "invalid statement");
 }
 
 // Assign offsets to local variables.
diff --git a/parse.c b/parse.c
index fde080a..e3e3e92 100644
--- a/parse.c
+++ b/parse.c
@@ -5,8 +5,8 @@
 Obj *locals;
 
 static Node *compound_stmt(Token **rest, Token *tok);
-static Node *expr(Token **rest, Token *tok);
 static Node *expr_stmt(Token **rest, Token *tok);
+static Node *expr(Token **rest, Token *tok);
 static Node *assign(Token **rest, Token *tok);
 static Node *equality(Token **rest, Token *tok);
 static Node *relational(Token **rest, Token *tok);
@@ -23,33 +23,34 @@ static Obj *find_var(Token *tok) {
   return NULL;
 }
 
-static Node *new_node(NodeKind kind) {
+static Node *new_node(NodeKind kind, Token *tok) {
   Node *node = calloc(1, sizeof(Node));
   node->kind = kind;
+  node->tok = tok;
   return node;
 }
 
-static Node *new_binary(NodeKind kind, Node *lhs, Node *rhs) {
-  Node *node = new_node(kind);
+static Node *new_binary(NodeKind kind, Node *lhs, Node *rhs, Token *tok) {
+  Node *node = new_node(kind, tok);
   node->lhs = lhs;
   node->rhs = rhs;
   return node;
 }
 
-static Node *new_unary(NodeKind kind, Node *expr) {
-  Node *node = new_node(kind);
+static Node *new_unary(NodeKind kind, Node *expr, Token *tok) {
+  Node *node = new_node(kind, tok);
   node->lhs = expr;
   return node;
 }
 
-static Node *new_num(int val) {
-  Node *node = new_node(ND_NUM);
+static Node *new_num(int val, Token *tok) {
+  Node *node = new_node(ND_NUM, tok);
   node->val = val;
   return node;
 }
 
-static Node *new_var_node(Obj *var) {
-  Node *node = new_node(ND_VAR);
+static Node *new_var_node(Obj *var, Token *tok) {
+  Node *node = new_node(ND_VAR, tok);
   node->var = var;
   return node;
 }
@@ -70,13 +71,14 @@ static Obj *new_lvar(char *name) {
 //      | expr-stmt
 static Node *stmt(Token **rest, Token *tok) {
   if (equal(tok, "return")) {
-    Node *node = new_unary(ND_RETURN, expr(&tok, tok->next));
+    Node *node = new_node(ND_RETURN, tok);
+    node->lhs = expr(&tok, tok->next);
     *rest = skip(tok, ";");
     return node;
   }
 
   if (equal(tok, "if")) {
-    Node *node = new_node(ND_IF);
+    Node *node = new_node(ND_IF, tok);
     tok = skip(tok->next, "(");
     node->cond = expr(&tok, tok);
     tok = skip(tok, ")");
@@ -88,7 +90,7 @@ static Node *stmt(Token **rest, Token *tok) {
   }
 
   if (equal(tok, "for")) {
-    Node *node = new_node(ND_FOR);
+    Node *node = new_node(ND_FOR, tok);
     tok = skip(tok->next, "(");
 
     node->init = expr_stmt(&tok, tok);
@@ -106,7 +108,7 @@ static Node *stmt(Token **rest, Token *tok) {
   }
 
   if (equal(tok, "while")) {
-    Node *node = new_node(ND_FOR);
+    Node *node = new_node(ND_FOR, tok);
     tok = skip(tok->next, "(");
     node->cond = expr(&tok, tok);
     tok = skip(tok, ")");
@@ -122,12 +124,13 @@ static Node *stmt(Token **rest, Token *tok) {
 
 // compound-stmt = stmt* "}"
 static Node *compound_stmt(Token **rest, Token *tok) {
+  Node *node = new_node(ND_BLOCK, tok);
+
   Node head = {};
   Node *cur = &head;
   while (!equal(tok, "}"))
     cur = cur->next = stmt(&tok, tok);
 
-  Node *node = new_node(ND_BLOCK);
   node->body = head.next;
   *rest = tok->next;
   return node;
@@ -137,10 +140,11 @@ static Node *compound_stmt(Token **rest, Token *tok) {
 static Node *expr_stmt(Token **rest, Token *tok) {
   if (equal(tok, ";")) {
     *rest = tok->next;
-    return new_node(ND_BLOCK);
+    return new_node(ND_BLOCK, tok);
   }
 
-  Node *node = new_unary(ND_EXPR_STMT, expr(&tok, tok));
+  Node *node = new_node(ND_EXPR_STMT, tok);
+  node->lhs = expr(&tok, tok);
   *rest = skip(tok, ";");
   return node;
 }
@@ -153,8 +157,10 @@ static Node *expr(Token **rest, Token *tok) {
 // assign = equality ("=" assign)?
 static Node *assign(Token **rest, Token *tok) {
   Node *node = equality(&tok, tok);
+
   if (equal(tok, "="))
-    node = new_binary(ND_ASSIGN, node, assign(&tok, tok->next));
+    return new_binary(ND_ASSIGN, node, assign(rest, tok->next), tok);
+
   *rest = tok;
   return node;
 }
@@ -164,13 +170,15 @@ static Node *equality(Token **rest, Token *tok) {
   Node *node = relational(&tok, tok);
 
   for (;;) {
+    Token *start = tok;
+
     if (equal(tok, "==")) {
-      node = new_binary(ND_EQ, node, relational(&tok, tok->next));
+      node = new_binary(ND_EQ, node, relational(&tok, tok->next), start);
       continue;
     }
 
     if (equal(tok, "!=")) {
-      node = new_binary(ND_NE, node, relational(&tok, tok->next));
+      node = new_binary(ND_NE, node, relational(&tok, tok->next), start);
       continue;
     }
 
@@ -184,23 +192,25 @@ static Node *relational(Token **rest, Token *tok) {
   Node *node = add(&tok, tok);
 
   for (;;) {
+    Token *start = tok;
+
     if (equal(tok, "<")) {
-      node = new_binary(ND_LT, node, add(&tok, tok->next));
+      node = new_binary(ND_LT, node, add(&tok, tok->next), start);
       continue;
     }
 
     if (equal(tok, "<=")) {
-      node = new_binary(ND_LE, node, add(&tok, tok->next));
+      node = new_binary(ND_LE, node, add(&tok, tok->next), start);
       continue;
     }
 
     if (equal(tok, ">")) {
-      node = new_binary(ND_LT, add(&tok, tok->next), node);
+      node = new_binary(ND_LT, add(&tok, tok->next), node, start);
       continue;
     }
 
     if (equal(tok, ">=")) {
-      node = new_binary(ND_LE, add(&tok, tok->next), node);
+      node = new_binary(ND_LE, add(&tok, tok->next), node, start);
       continue;
     }
 
@@ -214,13 +224,15 @@ static Node *add(Token **rest, Token *tok) {
   Node *node = mul(&tok, tok);
 
   for (;;) {
+    Token *start = tok;
+
     if (equal(tok, "+")) {
-      node = new_binary(ND_ADD, node, mul(&tok, tok->next));
+      node = new_binary(ND_ADD, node, mul(&tok, tok->next), start);
       continue;
     }
 
     if (equal(tok, "-")) {
-      node = new_binary(ND_SUB, node, mul(&tok, tok->next));
+      node = new_binary(ND_SUB, node, mul(&tok, tok->next), start);
       continue;
     }
 
@@ -234,13 +246,15 @@ static Node *mul(Token **rest, Token *tok) {
   Node *node = unary(&tok, tok);
 
   for (;;) {
+    Token *start = tok;
+
     if (equal(tok, "*")) {
-      node = new_binary(ND_MUL, node, unary(&tok, tok->next));
+      node = new_binary(ND_MUL, node, unary(&tok, tok->next), start);
       continue;
     }
 
     if (equal(tok, "/")) {
-      node = new_binary(ND_DIV, node, unary(&tok, tok->next));
+      node = new_binary(ND_DIV, node, unary(&tok, tok->next), start);
       continue;
     }
 
@@ -256,7 +270,7 @@ static Node *unary(Token **rest, Token *tok) {
     return unary(rest, tok->next);
 
   if (equal(tok, "-"))
-    return new_unary(ND_NEG, unary(rest, tok->next));
+    return new_unary(ND_NEG, unary(rest, tok->next), tok);
 
   return primary(rest, tok);
 }
@@ -274,11 +288,11 @@ static Node *primary(Token **rest, Token *tok) {
     if (!var)
       var = new_lvar(strndup(tok->loc, tok->len));
     *rest = tok->next;
-    return new_var_node(var);
+    return new_var_node(var, tok);
   }
 
   if (tok->kind == TK_NUM) {
-    Node *node = new_num(tok->val);
+    Node *node = new_num(tok->val, tok);
     *rest = tok->next;
     return node;
   }
