diff --git a/parse.c b/parse.c
index 947b823..c0505ff 100644
--- a/parse.c
+++ b/parse.c
@@ -1479,18 +1479,22 @@ static void gvar_initializer(Token **rest, Token *tok, Obj *var) {
 
 // Returns true if a given token represents a type.
 static bool is_typename(Token *tok) {
-  static char *kw[] = {
-    "void", "_Bool", "char", "short", "int", "long", "struct", "union",
-    "typedef", "enum", "static", "extern", "_Alignas", "signed", "unsigned",
-    "const", "volatile", "auto", "register", "restrict", "__restrict",
-    "__restrict__", "_Noreturn", "float", "double", "typeof", "inline",
-    "_Thread_local", "__thread",
-  };
+  static HashMap map;
+
+  if (map.capacity == 0) {
+    static char *kw[] = {
+      "void", "_Bool", "char", "short", "int", "long", "struct", "union",
+      "typedef", "enum", "static", "extern", "_Alignas", "signed", "unsigned",
+      "const", "volatile", "auto", "register", "restrict", "__restrict",
+      "__restrict__", "_Noreturn", "float", "double", "typeof", "inline",
+      "_Thread_local", "__thread",
+    };
+
+    for (int i = 0; i < sizeof(kw) / sizeof(*kw); i++)
+      hashmap_put(&map, kw[i], (void *)1);
+  }
 
-  for (int i = 0; i < sizeof(kw) / sizeof(*kw); i++)
-    if (equal(tok, kw[i]))
-      return true;
-  return find_typedef(tok);
+  return hashmap_get2(&map, tok->loc, tok->len) || find_typedef(tok);
 }
 
 // asm-stmt = "asm" ("volatile" | "inline")* "(" string-literal ")"
diff --git a/tokenize.c b/tokenize.c
index 7383dcf..42e341b 100644
--- a/tokenize.c
+++ b/tokenize.c
@@ -156,20 +156,24 @@ static int read_punct(char *p) {
 }
 
 static bool is_keyword(Token *tok) {
-  static char *kw[] = {
-    "return", "if", "else", "for", "while", "int", "sizeof", "char",
-    "struct", "union", "short", "long", "void", "typedef", "_Bool",
-    "enum", "static", "goto", "break", "continue", "switch", "case",
-    "default", "extern", "_Alignof", "_Alignas", "do", "signed",
-    "unsigned", "const", "volatile", "auto", "register", "restrict",
-    "__restrict", "__restrict__", "_Noreturn", "float", "double",
-    "typeof", "asm", "_Thread_local", "__thread",
-  };
+  static HashMap map;
+
+  if (map.capacity == 0) {
+    static char *kw[] = {
+      "return", "if", "else", "for", "while", "int", "sizeof", "char",
+      "struct", "union", "short", "long", "void", "typedef", "_Bool",
+      "enum", "static", "goto", "break", "continue", "switch", "case",
+      "default", "extern", "_Alignof", "_Alignas", "do", "signed",
+      "unsigned", "const", "volatile", "auto", "register", "restrict",
+      "__restrict", "__restrict__", "_Noreturn", "float", "double",
+      "typeof", "asm", "_Thread_local", "__thread",
+    };
+
+    for (int i = 0; i < sizeof(kw) / sizeof(*kw); i++)
+      hashmap_put(&map, kw[i], (void *)1);
+  }
 
-  for (int i = 0; i < sizeof(kw) / sizeof(*kw); i++)
-    if (equal(tok, kw[i]))
-      return true;
-  return false;
+  return hashmap_get2(&map, tok->loc, tok->len);
 }
 
 static int read_escaped_char(char **new_pos, char *p) {
