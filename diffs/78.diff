diff --git a/chibicc.h b/chibicc.h
index 8638ac2..e225975 100644
--- a/chibicc.h
+++ b/chibicc.h
@@ -8,6 +8,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <strings.h>
 
 typedef struct Type Type;
 typedef struct Node Node;
diff --git a/test/literal.c b/test/literal.c
index fd3ccf9..40d021f 100644
--- a/test/literal.c
+++ b/test/literal.c
@@ -5,6 +5,18 @@ int main() {
   ASSERT(10, '\n');
   ASSERT(-128, '\x80');
 
+  ASSERT(511, 0777);
+  ASSERT(0, 0x0);
+  ASSERT(10, 0xa);
+  ASSERT(10, 0XA);
+  ASSERT(48879, 0xbeef);
+  ASSERT(48879, 0xBEEF);
+  ASSERT(48879, 0XBEEF);
+  ASSERT(0, 0b0);
+  ASSERT(1, 0b1);
+  ASSERT(47, 0b101111);
+  ASSERT(47, 0B101111);
+
   printf("OK\n");
   return 0;
 }
diff --git a/tokenize.c b/tokenize.c
index be12ba3..1a30ad7 100644
--- a/tokenize.c
+++ b/tokenize.c
@@ -242,6 +242,29 @@ static Token *read_char_literal(char *start) {
   return tok;
 }
 
+static Token *read_int_literal(char *start) {
+  char *p = start;
+
+  int base = 10;
+  if (!strncasecmp(p, "0x", 2) && isalnum(p[2])) {
+    p += 2;
+    base = 16;
+  } else if (!strncasecmp(p, "0b", 2) && isalnum(p[2])) {
+    p += 2;
+    base = 2;
+  } else if (*p == '0') {
+    base = 8;
+  }
+
+  long val = strtoul(p, &p, base);
+  if (isalnum(*p))
+    error_at(p, "invalid digit");
+
+  Token *tok = new_token(TK_NUM, start, p);
+  tok->val = val;
+  return tok;
+}
+
 static void convert_keywords(Token *tok) {
   for (Token *t = tok; t->kind != TK_EOF; t = t->next)
     if (is_keyword(t))
@@ -296,10 +319,8 @@ static Token *tokenize(char *filename, char *p) {
 
     // Numeric literal
     if (isdigit(*p)) {
-      cur = cur->next = new_token(TK_NUM, p, p);
-      char *q = p;
-      cur->val = strtoul(p, &p, 10);
-      cur->len = p - q;
+      cur = cur->next = read_int_literal(p);
+      p += cur->len;
       continue;
     }
 
