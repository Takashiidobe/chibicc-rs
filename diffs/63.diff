diff --git a/parse.c b/parse.c
index d89b2c1..7d0e66f 100644
--- a/parse.c
+++ b/parse.c
@@ -379,6 +379,31 @@ static Type *declarator(Token **rest, Token *tok, Type *ty) {
   return ty;
 }
 
+// abstract-declarator = "*"* ("(" abstract-declarator ")")? type-suffix
+static Type *abstract_declarator(Token **rest, Token *tok, Type *ty) {
+  while (equal(tok, "*")) {
+    ty = pointer_to(ty);
+    tok = tok->next;
+  }
+
+  if (equal(tok, "(")) {
+    Token *start = tok;
+    Type dummy = {};
+    abstract_declarator(&tok, start->next, &dummy);
+    tok = skip(tok, ")");
+    ty = type_suffix(rest, tok, ty);
+    return abstract_declarator(&tok, start->next, ty);
+  }
+
+  return type_suffix(rest, tok, ty);
+}
+
+// type-name = declspec abstract-declarator
+static Type *typename(Token **rest, Token *tok) {
+  Type *ty = declspec(&tok, tok, NULL);
+  return abstract_declarator(rest, tok, ty);
+}
+
 // declaration = declspec (declarator ("=" expr)? ("," declarator ("=" expr)?)*)? ";"
 static Node *declaration(Token **rest, Token *tok, Type *basety) {
   Node head = {};
@@ -886,11 +911,14 @@ static Node *funcall(Token **rest, Token *tok) {
 
 // primary = "(" "{" stmt+ "}" ")"
 //         | "(" expr ")"
+//         | "sizeof" "(" type-name ")"
 //         | "sizeof" unary
 //         | ident func-args?
 //         | str
 //         | num
 static Node *primary(Token **rest, Token *tok) {
+  Token *start = tok;
+
   if (equal(tok, "(") && equal(tok->next, "{")) {
     // This is a GNU statement expresssion.
     Node *node = new_node(ND_STMT_EXPR, tok);
@@ -905,6 +933,12 @@ static Node *primary(Token **rest, Token *tok) {
     return node;
   }
 
+  if (equal(tok, "sizeof") && equal(tok->next, "(") && is_typename(tok->next->next)) {
+    Type *ty = typename(&tok, tok->next->next);
+    *rest = skip(tok, ")");
+    return new_num(ty->size, start);
+  }
+
   if (equal(tok, "sizeof")) {
     Node *node = unary(rest, tok->next);
     add_type(node);
diff --git a/test/sizeof.c b/test/sizeof.c
new file mode 100644
index 0000000..e63bd6d
--- /dev/null
+++ b/test/sizeof.c
@@ -0,0 +1,24 @@
+#include "test.h"
+
+int main() {
+  ASSERT(1, sizeof(char));
+  ASSERT(2, sizeof(short));
+  ASSERT(2, sizeof(short int));
+  ASSERT(2, sizeof(int short));
+  ASSERT(4, sizeof(int));
+  ASSERT(8, sizeof(long));
+  ASSERT(8, sizeof(long int));
+  ASSERT(8, sizeof(long int));
+  ASSERT(8, sizeof(char *));
+  ASSERT(8, sizeof(int *));
+  ASSERT(8, sizeof(long *));
+  ASSERT(8, sizeof(int **));
+  ASSERT(8, sizeof(int(*)[4]));
+  ASSERT(32, sizeof(int*[4]));
+  ASSERT(16, sizeof(int[4]));
+  ASSERT(48, sizeof(int[3][4]));
+  ASSERT(8, sizeof(struct {int a; int b;}));
+
+  printf("OK\n");
+  return 0;
+}
